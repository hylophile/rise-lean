(datatype RNat
  (Num i64)
  (MVar String)
  (Add RNat RNat)
  (Mul RNat RNat))

(datatype RData
   (DMVar String)
   (Array RNat RData)
   (Pair RData RData))

;; expr1 = 2 * (x + 3)
;;(let expr1 (Mul (Num 2) (Add (MVar "x") (Num 3))))
;; expr2 = 6 + 2 * x
;;(let expr2 (Add (Num 6) (Mul (Num 2) (MVar "x"))))

(rewrite (Add a b)
         (Add b a))
(rewrite (Mul a b)
         (Mul b a))
(rewrite (Mul a (Add b c))
         (Add (Mul a b) (Mul a c)))
(rewrite (Add (Num a) (Num b))
         (Num (+ a b)))
(rewrite (Mul (Num a) (Num b))
         (Num (* a b)))

;;(run 10)
;;(check (= expr1 expr2))


;;(rewrite (Array a b) (DMVar "?"))
;;(rewrite (DMVar a) (DMVar "?"))

(let expr3 (Array (Add (MVar "x") (Num 3)) (DMVar "y")))
(let expr4 (Array (Add (MVar "a") (Num 3)) (DMVar "b")))
(let expr5 a)
;; these facts are learned by unification. how could we learn them with eqsat?
(rewrite (MVar "x") (MVar "a"))
(rewrite (DMVar "y") (DMVar "b"))

(run 10)

(check (= expr3 expr4))
